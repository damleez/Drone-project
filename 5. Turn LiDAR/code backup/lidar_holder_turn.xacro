Back up 용도, 라이다 홀더 달고 홀더 돌리게 함 
근데 미친듯이 붕붕뜸

<?xml version="1.0"?>
<robot name="dam-typhoon" xmlns:xacro="http://ros.org/wiki/xacro">
  <xacro:arg name="camera_visual" default="true"/>
  <xacro:arg name="imu_visual"    default="true"/>

  <!--Gazebo Color-->
  <gazebo reference="base_link">
    <material>Gazebo/DarkGrey</material>
  </gazebo>
  <gazebo reference="cgo3_mount_link">
    <material>Gazebo/Black</material>
  </gazebo>
  <gazebo reference="cgo3_vertical_arm_link">
    <material>Gazebo/Black</material>
  </gazebo>
  <gazebo reference="cgo3_horizontal_arm_link">
    <material>Gazebo/Black</material>
  </gazebo>
  <gazebo reference="cgo3_camera_link">
    <material>Gazebo/Black</material>
  </gazebo>
  <gazebo reference="left_leg">
    <material>Gazebo/DarkGrey</material>
  </gazebo>
  <gazebo reference="right_leg">
    <material>Gazebo/DarkGrey</material>
  </gazebo>
  <gazebo reference="rotor_0">
    <material>Gazebo/Blue</material>
  </gazebo>
  <gazebo reference="rotor_1">
    <material>Gazebo/Blue</material>
  </gazebo>
  <gazebo reference="rotor_2">
    <material>Gazebo/Blue</material>
  </gazebo>
  <gazebo reference="rotor_3">
    <material>Gazebo/Blue</material>
  </gazebo>
  <gazebo reference="rotor_4">
    <material>Gazebo/Blue</material>
  </gazebo>
  <gazebo reference="rotor_5">
    <material>Gazebo/Blue</material>
  </gazebo>
  <gazebo reference="lidar_on_drone_link">
    <material>Gazebo/DarkGrey</material>
  </gazebo>


  <!--imu plugin -->
  <xacro:macro name="imu_plugin_macro"
    params="frame_rate      imu_visual">
    <link name="typhoon_h480/imu_link">
      <origin rpy="0 0 0" xyz="0 0 3.1415927"/>
      <inertial>
        <mass value="0.015"/>
        <inertia ixx="1e-05" ixy="0" ixz="0" iyy="1e-05" iyz="0" izz="1e-05"/>
      </inertial>
    </link>
    <joint name="typhoon_h480/imu_joint" type="revolute">
      <parent link="base_link"/>
      <child link="typhoon_h480/imu_link"/>
      <axis xyz="1 0 0"/>
      <limit effort="0" lower="0" upper="0" velocity="0"/>
    </joint>
    <gazebo reference="typhoon_h480/imu_link"> 
      <gravity>true</gravity>
        <sensor name="real_imu_sensor" type="imu">
        <pose>0 0 0 3.141593 0 0</pose>
        <always_on>true</always_on>
        <update_rate>${frame_rate}</update_rate>
        <visualize>${imu_visual}</visualize>
        <topic>__default_topic__</topic>
        <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
          <robotNamespace>/imu</robotNamespace>
          <bodyName>imu_frame</bodyName>
          <frameName>typhoon_h480/imu_link</frameName>
          <topicName>base_link</topicName>
          <updateRateHZ>50.0</updateRateHZ>
          <gaussianNoise>0.0</gaussianNoise>
          <xyzOffset>0 0 0</xyzOffset>
          <rpyOffset>0 0 0</rpyOffset>
        </plugin>
      </sensor>
    </gazebo>
  </xacro:macro>

  <!--camera plugin-->
  <xacro:macro name="camera_plugin_macro"
    params="parent_link      frame_rate
            horizontal_fov   image_width      image_height     min_distance
            max_distance     camera_visual">
    <link name="cgo3_camera_link">
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertial>
        <!-- place holder -->
        <mass value="0.1"/>
        <inertia ixx="0.001" ixy="0" ixz="0" iyy="0.001" iyz="0" izz="0.001"/>
      </inertial>
      <visual>
        <geometry>
          <mesh filename="package://dam-drone/xacro/urdf/TyphoonH480/meshes/cgo3_camera_remeshed_v1.stl" scale="0.002 0.002 0.002"/>
        </geometry>
        <material name="black"/>
      </visual>
      <collision>
        <origin rpy="0 -0 0" xyz="-0.1642 0 -0.324"/>
        <geometry>
          <sphere radius="0.035"/>
        </geometry>
      </collision>
      <!-- <sensor name="camera_imu" type="imu">
        <always_on>true</always_on>
      </sensor>
      <sensor name="camera" type="camera">
        <camera>
          <image far="15000" format="R8G8B8" height="360" hfov="2.0" near="0.05" width="640"/>
        </camera>
        <always_on>true</always_on>
        <update_rate>10</update_rate>
        <visualize>false</visualize> 
      </sensor>-->
    </link>
    <joint name="cgo3_camera_joint" type="fixed">
      <parent link="${parent_link}"/>
      <child link="cgo3_camera_link"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <axis xyz="0 -1 0"/>
      <!-- <limit effort="100" lower="-0.0872665" upper="1.5708" velocity="-1"/> -->
      <dynamics damping="0.1"/>
    </joint>

    <gazebo reference="cgo3_camera_link">
      <sensor type="camera" name="camera1">
        <updateRate>${frame_rate}</updateRate>
        <always_on>true</always_on>
        <visualize>${camera_visual}</visualize>
        <camera name="head">
          <horizontal_fov>0.6</horizontal_fov>
          <image>
            <format>R8G8B8</format>
            <width>${image_width}</width>
            <height>${image_height}</height>
          </image>
          <clip>
            <near>${min_distance}</near>
            <far>${max_distance}</far>
          </clip>
          <noise>
            <type>gaussian</type>
            <mean>0.0</mean>
            <stddev>0.007</stddev>
          </noise>
        </camera>
        <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
          <alwaysOn>true</alwaysOn>
          <updateRate>${frame_rate}</updateRate>
          <cameraName>camera1</cameraName>
          <imageTopicName>image_raw</imageTopicName>
          <cameraInfoTopicName>camera_info</cameraInfoTopicName>
          <pointCloudTopicName>points</pointCloudTopicName>
          <frameName>cgo3_camera_link</frameName>
          <hackBaseline>0.07</hackBaseline>
          <distortionK1>0.0</distortionK1>
          <distortionK2>0.0</distortionK2>
          <distortionK3>0.0</distortionK3>
          <distortionT1>0.0</distortionT1>
          <distortionT2>0.0</distortionT2>
        </plugin>
      </sensor>
    </gazebo>
  </xacro:macro>

  <!--depth camera plugin -->
  <xacro:macro name="depth_plugin_macro"
    params="frame_rate
            horizontal_fov   image_width      image_height     min_distance
            max_distance">

    <link name="camera_link">
      <visual>
        <origin xyz="0 0 0" rpy="1.57 0 1.57"/>
        <geometry>
          <mesh filename="package://dam-drone/xacro/d435.dae"/>
        </geometry>
        <material name="light_black"/>
      </visual>

      <collision>
        <origin xyz="0 0 0" rpy="1.57 0 1.57"/>
        <geometry>
          <mesh filename="package://dam-drone/xacro/d435.dae"/>
        </geometry>
      </collision>

      <inertial>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <mass value="0.001" />
        <inertia ixx="0.0000001" ixy="0.0" ixz="0.0"
                iyy="0.0000002" iyz="0.0"
                izz="0.0000002" />
      </inertial>
    </link>
  <!-- <link name="camera_rgb_frame"/>
  <link name="camera_rgb_optical_frame"/> -->
  <link name="camera_depth_frame"/>
  <link name="camera_depth_optical_frame"/>

  <link name="depth_on_drone_link">
    <inertial>
      <mass value="0.01"/>
      <origin xyz="0 0 0"/>
      <inertia ixx="1e-7" ixy="0" ixz="0" iyy="1e-7" iyz="0" izz="1e-7"/>
    </inertial>
    <visual>
      <origin xyz="0 0 0.03" />
      <geometry>
        <cylinder radius="0.0516" length="0.0817"/>
      </geometry>
      <material name="darkgrey"/>
    </visual>
  </link>

  <joint name="depth_on_drone_joint" type="revolute">
    <origin xyz="0 0 0.065" rpy="0 0 0" />
    <parent link="base_link"/>
    <child link="depth_on_drone_link"/>
    <limit upper="0" lower="0" effort="0" velocity="0"/>
  </joint> 

  <joint name="camera_joint" type="revolute">
    <parent link="base_link"/>
    <child link="camera_link"/>
    <origin xyz="0.07 0 0.12" rpy="0 0 0"/>
    <axis xyz="0 0 1"/>
    <limit effort="0" velocity="0" lower="0" upper="0" />
    <dynamics damping="1" friction="0"/>
  </joint>
  
  <!-- <joint name="camera_rgb_joint" type="fixed">
    <origin xyz="${D435_cam_rgb_px} ${D435_cam_rgb_py} ${D435_cam_rgb_pz}" rpy="0 0 0"/>
    <parent link="camera_link"/>
    <child link="camera_rgb_frame"/>
  </joint>

  <joint name="camera_rgb_optical_joint" type="fixed">
    <origin xyz="0 0 0" rpy="-1.57 0 -1.57"/>
    <parent link="camera_rgb_frame"/>
    <child link="camera_rgb_optical_frame"/>
  </joint> -->

  <joint name="camera_depth_joint" type="fixed">
    <origin xyz="${D435_cam_rgb_px} ${D435_cam_rgb_py + D435_cam_depth_offset} ${D435_cam_rgb_pz}" rpy="0 0 0"/>
    <parent link="camera_link"/>
    <child link="camera_depth_frame"/>
  </joint>

  <joint name="camera_depth_optical_joint" type="fixed">
    <origin xyz="0 0 0" rpy="-1.57 0 -1.57"/>
    <parent link="camera_depth_frame"/>
    <child link="camera_depth_optical_frame"/>
  </joint> 
  
    <gazebo reference="camera_link">
      <material>Gazebo/Black</material>
      <sensor name="realsense_D435" type="depth">
        <pose>0 0 0 0 0 0</pose>
        <update_rate>60</update_rate>
        <always_on>true</always_on>
        <update_rate>${frame_rate}</update_rate>
        <camera>
          <horizontal_fov>${horizontal_fov}</horizontal_fov>
          <image>
            <format>R8G8B8</format>
            <width>${image_width}</width>
            <height>${image_height}</height>
          </image>
          <clip>
            <near>${min_distance}</near>
            <far>${max_distance}</far>
          </clip>
        </camera>
        <plugin name="depth_camera_controller" filename="libgazebo_ros_openni_kinect.so">
          <baseline>0.2</baseline>
          <alwaysOn>true</alwaysOn>
          <updateRate>${frame_rate}</updateRate>
          <cameraName>camera</cameraName>
          <frameName>camera_depth_optical_frame</frameName>
          <imageTopicName>rgb/image_raw</imageTopicName>
          <depthImageTopicName>depth/image_raw</depthImageTopicName>
          <pointCloudTopicName>depth/points</pointCloudTopicName>
          <cameraInfoTopicName>rgb/camera_info</cameraInfoTopicName>
          <depthImageCameraInfoTopicName>depth/camera_info</depthImageCameraInfoTopicName>
          <pointCloudCutoff>0.5</pointCloudCutoff>
          <pointCloudCutoffMax>15000</pointCloudCutoffMax>
          <distortionK1>0.00000001</distortionK1>
          <distortionK2>0.00000001</distortionK2>
          <distortionK3>0.00000001</distortionK3>
          <distortionT1>0.00000001</distortionT1>
          <distortionT2>0.00000001</distortionT2>
          <CxPrime>0.0</CxPrime>
          <Cx>0.0</Cx>
          <Cy>0.0</Cy>
          <focalLength>0.0</focalLength>
          <hackBaseline>0.0</hackBaseline>
        </plugin>
      </sensor>
    </gazebo>
  </xacro:macro>
  
  <!--Velodyne VLP-16 plugin -->
  <xacro:macro name="lidar_plugin_macro"
    params="frame_rate       max_distance     noise            lidar_visual
            h_num_ray        v_num_ray        h_min_angle      h_max_angle
            v_min_angle      v_max_angle      collision_range  min_distance">

    <link name="lidar_on_drone_link">
      <inertial>
        <mass value="0.01"/>
        <origin xyz="0 0 0"/>
        <inertia ixx="1e-7" ixy="0" ixz="0" iyy="1e-7" iyz="0" izz="1e-7"/>
      </inertial>
      <visual>
        <origin xyz="0.2 0.004 0.007" />
        <geometry>
          <box size="0.0817 0.0817 0.0817"/>
        </geometry>
        <material name="darkgrey"/>
      </visual>
    </link>

    <joint name="lidar_on_drone_joint" type="revolute">
      <origin xyz="0 0 0.03" rpy="0 0 0" />
      <parent link="base_link"/>
      <child link="lidar_on_drone_link"/>
      <limit effort="0" upper="0" lower="0" velocity="0"/>
    </joint>

    <link name="lidar_holder_link">
      <inertial>
        <mass value="0.01"/>
        <origin xyz="0 0 0"/>
        <inertia ixx="1e-7" ixy="0" ixz="0" iyy="1e-7" iyz="0" izz="1e-7"/>
      </inertial>
      <visual>
        <origin xyz="0.2 0.004 0.007" />
        <geometry>
          <cylinder length="0.015" radius="0.015" />
        </geometry>
        <material name="darkgrey"/>
      </visual>
    </link>

    <joint name="lidar_holder_joint" type="revolute">
      <origin xyz="0.05 0 0.04" rpy="0 0 0" />
      <parent link="lidar_on_drone_link"/>
      <child link="lidar_holder_link"/>
      <axis xyz="1 0 0"/>
      <limit lower="-1e+16" upper="1e+16" effort="1.0" velocity="1.0"/>
      <!-- <limit effort="0" lower="0" upper="0" velocity="0"/> -->
    </joint>

    <joint name="lidar_base_mount_joint" type="fixed">
      <origin xyz="0.27 0 0" rpy="0 0 0" />
      <parent link="lidar_holder_link"/>
      <child link="lidar_base_link"/>
      <limit effort="0" lower="0" upper="0" velocity="0"/>
    </joint>

    <link name="lidar_base_link">
      <inertial>
        <mass value="0.83"/>
        <origin xyz="0 0 0.03815"/>
        <inertia ixx="${(0.83 * (3.0*0.0516*0.0516 + 0.0717*0.0717)) / 12.0}" ixy="0" ixz="0"
          iyy="${(0.83 * (3.0*0.0516*0.0516 + 0.0717*0.0717)) / 12.0}" iyz="0"
          izz="${0.5 * 0.83 * (0.0516*0.0516)}"/>
      </inertial>
      <visual>
        <geometry>
          <mesh filename="package://velodyne_description/meshes/VLP16_base_1.dae" />
        </geometry>
      </visual>
      <visual>
        <geometry>
          <mesh filename="package://velodyne_description/meshes/VLP16_base_2.dae" />
        </geometry>
      </visual>
      <collision>
        <origin rpy="0 0 0" xyz="0 0 0.03815"/>
        <geometry>
          <cylinder radius="0.0516" length="0.0717"/>
        </geometry>
      </collision>
    </link>

    <joint name="lidar_base_scan_joint" type="fixed" >
      <origin xyz="0.0 0.0 0.038" rpy="0 0 0" />
      <parent link="lidar_base_link" />
      <child link="lidar"/>
      <child link="lidar_base_link"/>
      <limit effort="0" lower="0" upper="0" velocity="0"/>
      <!-- <axis xyz="1 0 0" />
      <limit lower="-1e+16" upper="1e+16" effort="5.0" velocity="5.0"/> -->
    </joint>

    <link name="lidar">
      <inertial>
        <mass value="0.01"/>
        <origin xyz="0 0 0"/>
        <inertia ixx="1e-7" ixy="0" ixz="0" iyy="1e-7" iyz="0" izz="1e-7"/>
      </inertial>
      <visual>
        <origin xyz="0 0 -0.0377" />
        <geometry>
          <mesh filename="package://velodyne_description/meshes/VLP16_scan.dae" />
        </geometry>
      </visual>
    </link>

    <gazebo reference="lidar">
      <sensor type="gpu_ray" name="lidar-VLP16">
        <pose>0 0 0 0 0 0</pose>
        <always_on>true</always_on>
        <update_rate>${frame_rate}</update_rate>
        <visualize>${lidar_visual}</visualize> <!--true로 변경시 gazebo파랗게-->
        <ray>
          <scan>
            <horizontal>
              <samples>${h_num_ray}</samples>
              <resolution>1</resolution>
              <min_angle>${h_min_angle}</min_angle>
              <max_angle>${h_max_angle}</max_angle>
            </horizontal>
            <vertical>
              <samples>${v_num_ray}</samples>
              <resolution>1</resolution>
              <min_angle>${v_min_angle}</min_angle>
              <max_angle>${v_max_angle}</max_angle>
            </vertical>
          </scan>
          <range>
            <min>${collision_range}</min>
            <max>${max_distance+10}</max>
            <resolution>0.001</resolution>
          </range>
          <noise>
            <type>gaussian</type>
            <mean>0.0</mean>
            <stddev>0.0</stddev>
          </noise>
        </ray>

        <plugin name="gazebo_ros_laser_controller" filename="libgazebo_ros_velodyne_gpu_laser.so">
          <topicName>velodyne_points</topicName>
          <frameName>/lidar</frameName>
          <min_range>${min_distance}</min_range>
          <max_range>${max_distance}</max_range>
          <gaussianNoise>${noise}</gaussianNoise>
          <robotNamespace>/lidar</robotNamespace>
        </plugin>
      </sensor>
    </gazebo>

    <gazebo>
      <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
        <robotNamespace>/</robotNamespace>
      </plugin>
    </gazebo>

    <transmission name="holder_tran">
      <type>transmission_interface/SimpleTransmission</type>
      <joint name="lidar_holder_joint">
        <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
      </joint>
      <actuator name="holder_motor">
        <hardwareInterface>hardware_interface/VelocityActuatorInterface</hardwareInterface>
        <mechanicalReduction>1</mechanicalReduction>
      </actuator>
    </transmission>

  </xacro:macro>
</robot>
